classdef CombiCCA < eegtoolkit.classification.ClassifierBase;
    %COMBICCA Summary of this class goes here
    %   Detailed explanation goes here
%     fprintf('CombitCCA Processing TW %fs, No.crossvalidation %d \n',TW(tw_length),run);
%                         it=cell(12,1);
%                         for iN = 1:nClasses
%                             it{iN} = mean(SSVEPdata(chan_used,1:TW_p(tw_length),idx_traindata,iN),3);
%                         end                        
%                         % recognize SSVEP
    properties
        individualTemplates;
        referenceSignals;
        sti_f;
    end
    
    methods
        function CoCCA = CombiCCA(CoCCA, sti_f, numHarmonics, sampleLength, samplingRate)
            CoCCA.sti_f = sti_f;
            CoCCA.numHarmonics = numHarmonics;
            CoCCA.referenceSignals = CoCCA.ck_signalTrans(sti_f,sampleLength, samplingRate, numHarmonics);
        end
        
        function CoCCA = build(CoCCA)
            numLabels = length(unique(CoCCA.instanceSet.labels));
            CoCCA.individualTemplates = cell(numLabels,1);
            unLabels = unique(CoCCA.instanceSet.labels);
            for i=1:numLabels
                trialsIndices = CoCCA.instanceSet.labels==unLabels(i);
                CoCCA.individualTemplates{i} = squeeze(mean(CoCCA.instanceSet.sMatrix(trialsIndices,:,:),1));
            end
            
        end
        
        function [output, probabilities, ranking] = classifyInstance(CoCCA,instance)
        end
        
    end
    methods (Access = private)
        function instancesOutput = extract(CoCCA,sMatrix)
            numClasses = length(CoCCA.individualTemplates);
            numInstances = size(sMatrix,1);
            for i=1:numInstances
                for j=1:numClasses
                    [wxit,wyit,rit] = CoCCA.cca(squeeze(sMatrix(i,:,:)),CoCCA.individualTemplates{j});
                    [wxref,wyref,rref] = CoCCA.cca(squeeze(sMatrix(i,:,:)),CoCCA.refSignals(:,:,j)');
                    [wxitref,wyitref,ritref] = CoCCA.cca(CoCCA.individualTemplates{j},CoCCA.refSignals(:,:,j));
                    q1 = squeeze(sMatrix(i,:,:))'*wxref;
                    q2 = CoCCA.refSignals(:,:,j)'*wyref;
                    q3 = squeeze(sMatrix(i,:,:))'*wxit;
                    q4 = CoCCA.individualTemplates{j}'*wxit;
                    q5 = q1;
                    q6 = CoCCA.individualTemplates{j}'*wxref;
                    q7 = squeeze(sMatrix(i,:,:))'*wxitref;
                    q8 = CoCCA.individualTemplates{
                end
            end
        end
%                         for j=1:nClasses
%                             tempvec=zeros(nClasses,1);
%                             for jj=1:nClasses
%                                 [wxit,wyit,rit ]=cca(SSVEPdata(chan_used,1:TW_p(tw_length),run,j),it{jj}(:,1:TW_p(tw_length)));
%                                 [wxref,wyref,rref ]=cca(SSVEPdata(chan_used,1:TW_p(tw_length),run,j),sc{jj}(:,1:TW_p(tw_length)));
%                                 [wxitref,wyitref,ritref ]=cca(it{jj}(:,1:TW_p(tw_length)),sc{jj}(:,1:TW_p(tw_length)));
%                                 q1 = SSVEPdata(chan_used,1:TW_p(tw_length),run,j)'*wxref;
%                                 q2 = sc{jj}(:,1:TW_p(tw_length))'*wyref;
%                                 q3 = SSVEPdata(chan_used,1:TW_p(tw_length),run,j)'*wxit;
%                                 q4 = it{jj}(:,1:TW_p(tw_length))'*wxit;
%                                 q5 = q1;
%                                 q6 = it{jj}(:,1:TW_p(tw_length))'*wxref;
%                                 q7 = SSVEPdata(chan_used,1:TW_p(tw_length),run,j)'*wxitref;
%                                 q8 = it{jj}(:,1:TW_p(tw_length))'*wxitref;
%                                 r_n = [corr(q1(:),q2(:)) corr(q3(:),q4(:)) corr(q5(:),q6(:)) corr(q7(:),q8(:))];
%                                 rho_n = sum(sign(r_n).*r_n.^2);
%                                 tempvec(jj) = rho_n;%max(r1);
%                             end
%                             
%                             [v,idx]=max(tempvec);
%                             sub_lab(mth,(run-1)*nClasses+j,tw_length)=idx;
%                             if idx==j
%                                 n_correct(tw_length,mth)=n_correct(tw_length,mth)+1;
%                             end
%                         end        
        function refSignal=ck_signalTrans(CCA,f,mLen,FreqSamp,NumHarm)
            
            p=mLen;%1250;
            fs=FreqSamp;%250;
            TP=1/fs:1/fs:p/fs;
            for j=1:length(f)
                tempComp=[];
                for k=1:NumHarm
                    Sinh1=sin(2*pi*k*f(j)*TP);
                    Cosh1=cos(2*pi*k*f(j)*TP);
                    tempComp = [tempComp; Sinh1;Cosh1;];
                end
                refSignal(:,:,j)=tempComp;
            end
        end
    end
end

